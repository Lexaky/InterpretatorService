// <auto-generated />
using InterpretatorService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InterpretatorService.Migrations
{
    [DbContext(typeof(TestsDbContext))]
    [Migration("20250606082301_ConnectionToDocker")]
    partial class ConnectionToDocker
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InterpretatorService.Models.AlgoStep", b =>
                {
                    b.Property<int>("Step")
                        .HasColumnType("integer")
                        .HasColumnName("algo_step");

                    b.Property<int>("AlgoId")
                        .HasColumnType("integer")
                        .HasColumnName("algo_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<float>("Difficult")
                        .HasColumnType("real")
                        .HasColumnName("difficult");

                    b.HasKey("Step", "AlgoId");

                    b.HasIndex("AlgoId");

                    b.ToTable("algorithmsteps", (string)null);
                });

            modelBuilder.Entity("InterpretatorService.Models.Algorithm", b =>
                {
                    b.Property<int>("AlgoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("algo_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AlgoId"));

                    b.Property<string>("AlgoPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("src_path");

                    b.Property<string>("AlgorithmName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("algo_name");

                    b.Property<string>("PicPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pic_path");

                    b.HasKey("AlgoId");

                    b.ToTable("algorithms", (string)null);
                });

            modelBuilder.Entity("InterpretatorService.Models.InputTestData", b =>
                {
                    b.Property<int>("TestId")
                        .HasColumnType("integer")
                        .HasColumnName("test_id");

                    b.Property<string>("VarName")
                        .HasColumnType("text")
                        .HasColumnName("var_name");

                    b.Property<int>("LineNumber")
                        .HasColumnType("integer")
                        .HasColumnName("line_number");

                    b.Property<string>("VarType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("var_type");

                    b.Property<string>("VarValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("var_value");

                    b.HasKey("TestId", "VarName");

                    b.ToTable("testinputdata", (string)null);
                });

            modelBuilder.Entity("InterpretatorService.Models.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("test_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TestId"));

                    b.Property<int>("AlgoId")
                        .HasColumnType("integer")
                        .HasColumnName("algo_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("SolvedCount")
                        .HasColumnType("integer")
                        .HasColumnName("solved_count");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("test_name");

                    b.Property<int>("UnsolvedCount")
                        .HasColumnType("integer")
                        .HasColumnName("unsolved_count");

                    b.Property<float>("difficult")
                        .HasColumnType("real")
                        .HasColumnName("difficult");

                    b.HasKey("TestId");

                    b.HasIndex("AlgoId");

                    b.ToTable("tests", (string)null);
                });

            modelBuilder.Entity("InterpretatorService.Models.TrackVariable", b =>
                {
                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Sequence"));

                    b.Property<int>("AlgoId")
                        .HasColumnType("integer")
                        .HasColumnName("algo_id");

                    b.Property<int>("LineNumber")
                        .HasColumnType("integer")
                        .HasColumnName("line_number");

                    b.Property<int>("Step")
                        .HasColumnType("integer")
                        .HasColumnName("algo_step");

                    b.Property<string>("VarName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("var_name");

                    b.Property<string>("VarType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("var_type");

                    b.Property<int?>("algo_id")
                        .HasColumnType("integer");

                    b.Property<int?>("algo_step")
                        .HasColumnType("integer");

                    b.HasKey("Sequence");

                    b.HasIndex("algo_step", "algo_id");

                    b.ToTable("trackedvariables", null, t =>
                        {
                            t.Property("algo_id")
                                .HasColumnName("algo_id1");

                            t.Property("algo_step")
                                .HasColumnName("algo_step1");
                        });
                });

            modelBuilder.Entity("InterpretatorService.Models.AlgoStep", b =>
                {
                    b.HasOne("InterpretatorService.Models.Algorithm", null)
                        .WithMany()
                        .HasForeignKey("AlgoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InterpretatorService.Models.Test", b =>
                {
                    b.HasOne("InterpretatorService.Models.Algorithm", null)
                        .WithMany()
                        .HasForeignKey("AlgoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InterpretatorService.Models.TrackVariable", b =>
                {
                    b.HasOne("InterpretatorService.Models.AlgoStep", null)
                        .WithMany()
                        .HasForeignKey("algo_step", "algo_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
